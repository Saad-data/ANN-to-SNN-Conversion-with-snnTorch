# -*- coding: utf-8 -*-
"""snntorch_anntosnn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1caf3kDPug72nICwRbU6wzohLR5V6mH9p
"""

!pip install matplotlib

!pip install snntorch

#!pip install --upgrade torch

import torch
import snntorch as snn
from snntorch import spikegen
import time

# Define a simple ANN
class SimpleANN(torch.nn.Module):
    def __init__(self):
        super(SimpleANN, self).__init__()
        self.fc1 = torch.nn.Linear(10, 10)
        self.relu = torch.nn.ReLU()

    def forward(self, x):
        x = self.fc1(x)
        return self.relu(x)

# Convert ANN to SNN
class SimpleSNN(torch.nn.Module):
    def __init__(self):
        super(SimpleSNN, self).__init__()
        self.fc1 = torch.nn.Linear(10, 10)
        self.lif1 = snn.Leaky(beta=0.5)

    def forward(self, x):
        mem = self.lif1(self.fc1(x))
        return mem

# Function to test the performance of the network
def test_performance(model, input_data):
    start_time = time.time()
    output = model(input_data)
    end_time = time.time()
    return output, end_time - start_time

# Initialize models
ann = SimpleANN()
snn = SimpleSNN()

# Generate random input data
input_data = torch.rand(1, 10)

# Test ANN performance
ann_output, ann_time = test_performance(ann, input_data)
print(f"ANN output: {ann_output}\nTime taken: {ann_time} seconds")

#Test SNN performance and collect outputs at each time step
time_steps = 100
snn_outputs = torch.zeros(time_steps, 10)  # Assuming 10 output neurons
input_data = input_data.repeat(time_steps, 1, 1)

# Test SNN performance
# Note: SNNs operate over time, so input data needs a time dimension
#time_steps = 100
#input_data = input_data.repeat(time_steps, 1, 1)
##snn_output, snn_time = test_performance(snn, input_data)
#print(f"SNN output at last time step: {snn_output[-1]}\nTime taken: {snn_time} seconds")

import matplotlib.pyplot as plt

for t in range(time_steps):
    snn_output, _ = snn(input_data[t])  # Extracting the relevant output from the tuple
    snn_outputs[t] = snn_output

# Plotting
plt.figure(figsize=(12, 6))
plt.subplot(1, 2, 1)
plt.plot(ann_output.detach().numpy().flatten(), label='ANN Output')
plt.title('ANN Output')
plt.xlabel('Output Neurons')
plt.ylabel('Activation')
plt.legend()

plt.subplot(1, 2, 2)
plt.imshow(snn_outputs.detach().numpy().T, cmap='hot', aspect='auto')
plt.colorbar(label='Activation')
plt.title('SNN Output Over Time')
plt.xlabel('Time Step')
plt.ylabel('Output Neurons')
plt.show()

